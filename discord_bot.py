import discord
from discord.ext import commands, tasks
import asyncio
import aiohttp
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import json
import io
import base64
from PIL import Image, ImageDraw, ImageFont

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBSITE_URL = os.getenv("WEBSITE_URL", "http://localhost:5000")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")

# Bot setup
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix=['!', '/'], intents=intents, help_command=None)

async def fetch_json(session, url, description):
    try:
        async with session.get(url, timeout=10) as resp:
            if resp.status != 200:
                print(f"–û—à–∏–±–∫–∞ {description}: HTTP {resp.status}")
                return None
            return await resp.json()
    except asyncio.TimeoutError:
        print(f"–û—à–∏–±–∫–∞ {description}: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ {description}: {e}")
    return None

async def create_ascend_image(player_data, ascend_data):
    """Generate ASCEND card image using PIL"""
    try:
        # Create image
        width, height = 800, 600
        img = Image.new('RGB', (width, height), '#1a1a2e')
        draw = ImageDraw.Draw(img)

        try:
            # Attempt to use specific fonts, fallback to default if not found
            font_large = ImageFont.truetype("/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf", 36)
            font_medium = ImageFont.truetype("/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf", 24)
            font_small = ImageFont.truetype("/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf", 18)
        except IOError:
            print("–®—Ä–∏—Ñ—Ç—ã Liberation –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            font_large = ImageFont.load_default()
            font_medium = ImageFont.load_default()
            font_small = ImageFont.load_default()

        # Header
        draw.text((400, 30), "ASCEND Performance Card", fill='#ffd700', font=font_large, anchor='mt')
        draw.text((400, 80), f"{player_data['nickname']}", fill='white', font=font_medium, anchor='mt')

        # Skills
        skills = [
            (ascend_data.get('skill1_name', 'PVP'), ascend_data.get('skill1_score', 25)),
            (ascend_data.get('skill2_name', 'Clutching'), ascend_data.get('skill2_score', 25)),
            (ascend_data.get('skill3_name', 'Block Placement'), ascend_data.get('skill3_score', 25)),
            (ascend_data.get('skill4_name', 'Gamesense'), ascend_data.get('skill4_score', 25))
        ]

        y_start = 150
        for i, (skill_name, score) in enumerate(skills):
            y = y_start + (i * 80)

            # Skill name
            draw.text((50, y), f"{skill_name}:", fill='white', font=font_medium)

            # Score bar
            bar_width = 300
            bar_height = 20
            bar_x = 250
            bar_y = y + 5

            # Background bar
            draw.rectangle([bar_x, bar_y, bar_x + bar_width, bar_y + bar_height], fill='#333333')

            # Score bar
            score_width = (score / 100) * bar_width
            color = '#ff4757' if score < 40 else '#ffa502' if score < 70 else '#2ed573'
            draw.rectangle([bar_x, bar_y, bar_x + score_width, bar_y + bar_height], fill=color)

            # Score text
            draw.text((bar_x + bar_width + 20, y), f"{score}/100", fill='white', font=font_small)

        # Overall tier
        overall_tier = ascend_data.get('overall_tier', 'D')
        draw.text((400, 500), f"Overall Tier: {overall_tier}", fill='#ffd700', font=font_large, anchor='mt')

        # Average score
        avg_score = sum(skill[1] for skill in skills) / 4
        draw.text((400, 550), f"Average Score: {avg_score:.1f}", fill='#48dbfb', font=font_medium, anchor='mt')

        # Convert to bytes
        img_bytes = io.BytesIO()
        img.save(img_bytes, format='PNG')
        img_bytes.seek(0)

        return img_bytes
    except Exception as e:
        print(f"Error creating ASCEND image: {e}")
        return None

@bot.event
async def on_ready():
    print(f'{bot.user} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')
    print(f'Bot ID: {bot.user.id}')
    await bot.change_presence(activity=discord.Game(name="Elite Squad ASCEND | /help"))

    # Start background tasks
    leaderboard_update.start()
    karma_monitor.start()

    # Sync slash commands
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} slash-–∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

@tasks.loop(hours=1)
async def leaderboard_update():
    """Update bot status with current leaderboard info"""
    try:
        async with aiohttp.ClientSession() as session:
            stats = await fetch_json(session, f"{WEBSITE_URL}/api/stats", "–ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            if stats and stats.get('total_players'):
                activity = discord.Game(name=f"Elite Squad | {stats['total_players']} –∏–≥—Ä–æ–∫–æ–≤")
                await bot.change_presence(activity=activity)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

@tasks.loop(minutes=30)
async def karma_monitor():
    """Monitor players with low karma and send warnings"""
    try:
        async with aiohttp.ClientSession() as session:
            # Get players with low karma (< 20)
            players = await fetch_json(session, f"{WEBSITE_URL}/api/leaderboard?sort=reputation&limit=100", "–ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤")
            if players and players.get('players'):
                low_karma_players = [p for p in players['players'] if p.get('reputation', 0) < 20]

                if low_karma_players:
                    # Find main guild and general channel
                    for guild in bot.guilds:
                        # Heuristic to find the main server (e.g., most members)
                        if guild.member_count > 1000: # Assuming a large server is the main one
                            general = discord.utils.get(guild.channels, name='general') or discord.utils.get(guild.channels, name='main') or discord.utils.get(guild.channels, name='chat') or guild.text_channels[0]
                            if general:
                                embed = discord.Embed(
                                    title="‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—Ä–º—ã",
                                    description=f"–ù–∞–π–¥–µ–Ω–æ {len(low_karma_players)} –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∏–∑–∫–æ–π –∫–∞—Ä–º–æ–π",
                                    color=0xff6b6b,
                                    timestamp=datetime.utcnow()
                                )

                                karma_list = []
                                for player in low_karma_players[:5]:
                                    karma_list.append(f"**{player['nickname']}** - –ö–∞—Ä–º–∞: {player.get('reputation', 0)}")

                                embed.add_field(name="–ò–≥—Ä–æ–∫–∏ —Å –Ω–∏–∑–∫–æ–π –∫–∞—Ä–º–æ–π:", value="\n".join(karma_list), inline=False)
                                embed.add_field(name="–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∏–∑–∫–æ–π –∫–∞—Ä–º—ã:",
                                              value="‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —á–∞—Ç–µ\n‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –¥—Ä–æ–ø–∞ —Ä–µ—Å—É—Ä—Å–æ–≤\n‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö",
                                              inline=False)

                                await general.send(embed=embed)
                            break # Process only the first likely main server found
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—Ä–º—ã: {e}")

@leaderboard_update.before_loop
async def before_leaderboard_update():
    await bot.wait_until_ready()

@karma_monitor.before_loop
async def before_karma_monitor():
    await bot.wait_until_ready()

@bot.tree.command(name="ascend", description="–ü–æ–∫–∞–∑–∞—Ç—å ASCEND –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
async def ascend_card(interaction: discord.Interaction, nickname: str, gamemode: str = "bedwars", visual: bool = False):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]
            player_id = player['id']

            ascend_data = await fetch_json(session, f"{WEBSITE_URL}/api/player/{player_id}/ascend-data?gamemode={gamemode}", "–ø–æ–ª—É—á–µ–Ω–∏—è ASCEND –¥–∞–Ω–Ω—ã—Ö")
            if not ascend_data or not ascend_data.get('success'):
                await interaction.followup.send("‚ùå ASCEND –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", ephemeral=True)
                return

            ascend = ascend_data['ascend']

        embed = discord.Embed(
            title="üéÆ ASCEND Performance Card",
            description=f"**{player['nickname']}** | –£—Ä–æ–≤–µ–Ω—å {player['level']} | {gamemode.title()}",
            color=get_tier_color(ascend['overall_tier']),
            timestamp=datetime.utcnow()
        )

        # Use dynamic skill names
        skill_emojis = get_skill_emojis(gamemode)
        skills = [
            (ascend.get('skill1_name', 'PVP'), ascend.get('skill1_tier', ascend.get('pvp_tier', 'D')), ascend.get('skill1_score', ascend.get('pvp_score', 25))),
            (ascend.get('skill2_name', 'Clutching'), ascend.get('skill2_tier', ascend.get('clutching_tier', 'D')), ascend.get('skill2_score', ascend.get('clutching_score', 25))),
            (ascend.get('skill3_name', 'Block Placement'), ascend.get('skill3_tier', ascend.get('block_placement_tier', 'D')), ascend.get('skill3_score', ascend.get('block_placement_score', 25))),
            (ascend.get('skill4_name', 'Gamesense'), ascend.get('skill4_tier', ascend.get('gamesense_tier', 'D')), ascend.get('skill4_score', ascend.get('gamesense_score', 25)))
        ]

        for i, (name, tier, score) in enumerate(skills):
            emoji = skill_emojis[i] if i < len(skill_emojis) else "‚≠ê"
            embed.add_field(name=f"{emoji} {name}", value=f"**{tier}** ({score}/100)", inline=True)

        embed.add_field(name="üëë Overall", value=f"**{ascend['overall_tier']}** TIER", inline=True)

        avg_score = sum(skill[2] for skill in skills) / 4
        embed.add_field(name="üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", value=f"**{avg_score:.1f}/100**", inline=True)

        if ascend.get('global_rank'):
            embed.add_field(name="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥", value=f"**#{ascend['global_rank']}**", inline=True)

        if ascend.get('comment'):
            embed.add_field(name="üí¨ –û—Ü–µ–Ω–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞", value=f"*{ascend['comment'][:1000]}*", inline=False)

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text=f"–û—Ü–µ–Ω—â–∏–∫: {ascend.get('evaluator_name', 'Elite Squad')} | Elite Squad ASCEND")

        files = []
        if visual:
            # Generate image
            img_bytes = await create_ascend_image(player, ascend)
            if img_bytes:
                files.append(discord.File(img_bytes, filename=f"ascend_{nickname}.png"))
                embed.set_image(url=f"attachment://ascend_{nickname}.png")

        view = ASCENDView(player_id, player['nickname'], gamemode)
        await interaction.followup.send(embed=embed, view=view, files=files)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ascend: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", ephemeral=True)

@bot.tree.command(name="karma", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä–º–µ –∏–≥—Ä–æ–∫–∞")
async def karma_info(interaction: discord.Interaction, nickname: str = None):
    try:
        await interaction.response.defer()

        if not nickname:
            # Show general karma info
            embed = discord.Embed(
                title="üîÆ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã Elite Squad",
                description="–ö–∞—Ä–º–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç",
                color=0x8b4fa5,
                timestamp=datetime.utcnow()
            )

            embed.add_field(
                name="üíú –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤—ã—Å–æ–∫–æ–π –∫–∞—Ä–º—ã (80+)",
                value="‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –¥—Ä–æ–ø —Ä–µ—Å—É—Ä—Å–æ–≤\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–∞–º\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏\n‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –≤ Discord",
                inline=False
            )

            embed.add_field(
                name="‚ö†Ô∏è –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∏–∑–∫–æ–π –∫–∞—Ä–º—ã (20-)",
                value="‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —á–∞—Ç–µ\n‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –¥—Ä–æ–ø–∞ —Ä–µ—Å—É—Ä—Å–æ–≤\n‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                inline=False
            )

            embed.add_field(
                name="üìà –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—Ä–º—É",
                value="‚Ä¢ –ü–æ–±–µ–∂–¥–∞–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö\n‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã\n‚Ä¢ –ü–æ–º–æ–≥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º\n‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ",
                inline=False
            )

            await interaction.followup.send(embed=embed)
            return

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]

        karma = player.get('reputation', 0)

        # Determine karma level and color
        if karma >= 80:
            level = "–í—ã—Å–æ–∫–∞—è"
            color = 0x00ff00
            emoji = "üíö"
        elif karma >= 50:
            level = "–°—Ä–µ–¥–Ω—è—è"
            color = 0xffff00
            emoji = "üíõ"
        elif karma >= 20:
            level = "–ù–∏–∑–∫–∞—è"
            color = 0xff8800
            emoji = "üß°"
        else:
            level = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"
            color = 0xff0000
            emoji = "üíî"

        embed = discord.Embed(
            title=f"üîÆ –ö–∞—Ä–º–∞ –∏–≥—Ä–æ–∫–∞ {player['nickname']}",
            color=color,
            timestamp=datetime.utcnow()
        )

        embed.add_field(name="üíú –¢–µ–∫—É—â–∞—è –∫–∞—Ä–º–∞", value=f"**{karma}** {emoji}", inline=True)
        embed.add_field(name="üìä –£—Ä–æ–≤–µ–Ω—å", value=f"**{level}**", inline=True)
        embed.add_field(name="‚≠ê –ò–≥—Ä–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å", value=f"**{player['level']}**", inline=True)

        if karma < 20:
            embed.add_field(
                name="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                value="–£ –≤–∞—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è –∫–∞—Ä–º–∞! –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç.",
                inline=False
            )

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text="–ö–∞—Ä–º–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ karma: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä–º—ã", ephemeral=True)

@bot.tree.command(name="shop", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤")
async def shop_command(interaction: discord.Interaction, category: str = "all"):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            # Get shop items
            shop_data = await fetch_json(session, f"{WEBSITE_URL}/api/shop", "–ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞")
            if not shop_data or not shop_data.get('items'):
                await interaction.followup.send("‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", ephemeral=True)
                return

        items = shop_data['items']
        if category != "all":
            items = [item for item in items if item.get('category') == category]

        if not items:
            await interaction.followup.send(f"‚ùå –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{category}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ephemeral=True)
            return

        embed = discord.Embed(
            title="üõí –ú–∞–≥–∞–∑–∏–Ω Elite Squad",
            description=f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}",
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )

        # Show first 10 items
        for item in items[:10]:
            price_text = ""
            if item.get('price_coins', 0) > 0:
                price_text += f"üí∞ {item['price_coins']:,} –∫–æ–π–Ω–æ–≤"
            if item.get('price_reputation', 0) > 0:
                if price_text:
                    price_text += " | "
                price_text += f"üíú {item['price_reputation']} –∫–∞—Ä–º—ã"

            embed.add_field(
                name=f"{item.get('emoji', 'üì¶')} {item['display_name']}",
                value=f"{item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n**–¶–µ–Ω–∞:** {price_text}",
                inline=True
            )

        embed.add_field(
            name="üí° –ö–∞–∫ –∫—É–ø–∏—Ç—å",
            value=f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/buy <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–æ–≤–∞—Ä–∞>` –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: {WEBSITE_URL}/shop",
            inline=False
        )

        embed.set_footer(text="–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–π–Ω–∞—Ö –∏ –∫–∞—Ä–º–µ")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ shop: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", ephemeral=True)

@bot.tree.command(name="inventory", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞")
async def inventory_command(interaction: discord.Interaction, nickname: str):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]
            player_id = player['id']

            # Get inventory data
            inventory_data = await fetch_json(session, f"{WEBSITE_URL}/api/player/{player_id}/inventory", "–ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")

        embed = discord.Embed(
            title=f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {player['nickname']}",
            color=0x3498db,
            timestamp=datetime.utcnow()
        )

        embed.add_field(name="üí∞ –ö–æ–π–Ω—ã", value=f"**{player.get('coins', 0):,}**", inline=True)
        embed.add_field(name="üíú –ö–∞—Ä–º–∞", value=f"**{player.get('reputation', 0)}**", inline=True)
        embed.add_field(name="‚≠ê –£—Ä–æ–≤–µ–Ω—å", value=f"**{player['level']}**", inline=True)

        # Show inventory items if available
        if inventory_data and inventory_data.get('success'):
            inventory = inventory_data.get('inventory', {})

            for category, items in inventory.items():
                if items:
                    items_text = []
                    for item_id, quantity in items.items():
                        items_text.append(f"‚Ä¢ ID {item_id}: x{quantity}")

                    embed.add_field(
                        name=f"üì¶ {category.title()}",
                        value="\n".join(items_text[:5]) + ("..." if len(items_text) > 5 else ""),
                        inline=True
                    )

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.set_footer(text="–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ inventory: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è", ephemeral=True)

@bot.tree.command(name="quests", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–µ—Å—Ç—ã –∏–≥—Ä–æ–∫–∞")
async def quests_command(interaction: discord.Interaction, nickname: str):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")
            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]
            player_id = player['id']

            # Get quests data
            quests_data = await fetch_json(session, f"{WEBSITE_URL}/api/player/{player_id}/quests", "–ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤")

        embed = discord.Embed(
            title=f"üìú –ö–≤–µ—Å—Ç—ã –∏–≥—Ä–æ–∫–∞ {player['nickname']}",
            color=0xe74c3c,
            timestamp=datetime.utcnow()
        )

        if quests_data and quests_data.get('success'):
            active_quests = quests_data.get('active_quests', [])
            completed_quests = quests_data.get('completed_quests', [])

            if active_quests:
                quests_text = []
                for quest in active_quests[:5]:
                    progress = quest.get('progress', 0)
                    target = quest.get('target', 100)
                    progress_percent = (progress / target) * 100 if target > 0 else 0

                    quests_text.append(f"**{quest['title']}**\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{target} ({progress_percent:.1f}%)")

                embed.add_field(name="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã", value="\n\n".join(quests_text), inline=False)

            if completed_quests:
                embed.add_field(name="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤", value=f"**{len(completed_quests)}**", inline=True)

        embed.add_field(
            name="üí° –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç",
            value="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ `/submit_quest`",
            inline=False
        )

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ quests: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–æ–≤", ephemeral=True)

@bot.tree.command(name="submit_quest", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
async def submit_quest(interaction: discord.Interaction, quest_name: str, attachment: discord.Attachment = None):
    try:
        await interaction.response.defer()

        if not attachment:
            await interaction.followup.send("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", ephemeral=True)
            return

        # Check if attachment is image
        if not attachment.content_type or not attachment.content_type.startswith('image/'):
            await interaction.followup.send("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", ephemeral=True)
            return

        # Create submission embed
        embed = discord.Embed(
            title="üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–≤–µ—Å—Ç–∞",
            description=f"**–ò–≥—Ä–æ–∫:** {interaction.user.mention}\n**–ö–≤–µ—Å—Ç:** {quest_name}",
            color=0xffa500,
            timestamp=datetime.utcnow()
        )

        embed.add_field(name="üìé –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", value=f"[{attachment.filename}]({attachment.url})", inline=False)
        embed.set_image(url=attachment.url)
        embed.set_footer(text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}")

        # Send to admin channel
        admin_channel = None
        for guild in bot.guilds:
            admin_channel = discord.utils.get(guild.channels, name='quest-submissions') or \
                           discord.utils.get(guild.channels, name='admin') or \
                           discord.utils.get(guild.channels, name='–º–æ–¥–µ—Ä–∞—Ü–∏—è')
            if admin_channel:
                break

        if admin_channel:
            view = QuestReviewView(interaction.user.id, quest_name)
            await admin_channel.send(embed=embed, view=view)

            await interaction.followup.send(
                "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                ephemeral=True
            )
        else:
            await interaction.followup.send(
                "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                ephemeral=True
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ submit_quest: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏", ephemeral=True)

class QuestReviewView(discord.ui.View):
    def __init__(self, user_id, quest_name):
        super().__init__(timeout=None)
        self.user_id = user_id
        self.quest_name = quest_name

    @discord.ui.button(label="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success)
    async def accept_quest(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()

        # Here you would call your API to complete the quest
        try:
            async with aiohttp.ClientSession() as session:
                response = await session.post(
                    f"{WEBSITE_URL}/api/admin/complete_quest",
                    json={
                        'user_id': self.user_id,
                        'quest_name': self.quest_name,
                        'approved_by': str(interaction.user.id)
                    }
                )
                # Optionally check response status here
                if response.status != 200:
                    print(f"API Error completing quest: {response.status} - {await response.text()}")
                    await interaction.followup.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
                    return

        except Exception as e:
            print(f"Error completing quest: {e}")
            await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.", ephemeral=True)
            return

        embed = discord.Embed(
            title="‚úÖ –ö–≤–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç",
            description=f"–ö–≤–µ—Å—Ç **{self.quest_name}** –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{self.user_id}> –≤—ã–ø–æ–ª–Ω–µ–Ω!",
            color=0x00ff00
        )
        embed.set_footer(text=f"–ü—Ä–∏–Ω—è–ª: {interaction.user}")

        await interaction.edit_original_response(embed=embed, view=None)

        # Notify user
        try:
            user = bot.get_user(self.user_id)
            if user:
                await user.send(f"‚úÖ –í–∞—à –∫–≤–µ—Å—Ç **{self.quest_name}** –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∏ –∑–∞—Å—á–∏—Ç–∞–Ω!")
        except discord.Forbidden:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id} (–∑–∞–ø—Ä–µ—Ç DM).")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id}: {e}")

    @discord.ui.button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger)
    async def reject_quest(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(RejectQuestModal(self.user_id, self.quest_name))

class RejectQuestModal(discord.ui.Modal, title="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç"):
    def __init__(self, user_id, quest_name):
        super().__init__()
        self.user_id = user_id
        self.quest_name = quest_name

    reason = discord.ui.TextInput(
        label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É...",
        max_length=500,
        required=True
    )

    async def on_submit(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="‚ùå –ö–≤–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω",
            description=f"–ö–≤–µ—Å—Ç **{self.quest_name}** –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{self.user_id}> –æ—Ç–∫–ª–æ–Ω–µ–Ω",
            color=0xff0000
        )
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=self.reason.value, inline=False)
        embed.set_footer(text=f"–û—Ç–∫–ª–æ–Ω–∏–ª: {interaction.user}")

        await interaction.response.edit_message(embed=embed, view=None)

        # Notify user
        try:
            user = bot.get_user(self.user_id)
            if user:
                await user.send(f"‚ùå –í–∞—à –∫–≤–µ—Å—Ç **{self.quest_name}** –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {self.reason.value}")
        except discord.Forbidden:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id} (–∑–∞–ø—Ä–µ—Ç DM).")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id}: {e}")

# --- Existing ASCENDView class ---
class ASCENDView(discord.ui.View):
    def __init__(self, player_id, nickname, current_gamemode):
        super().__init__(timeout=300)
        self.player_id = player_id
        self.nickname = nickname
        self.current_gamemode = current_gamemode

    @discord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã...",
        options=[
            discord.SelectOption(label="Bedwars", value="bedwars", emoji="üõèÔ∏è"),
            discord.SelectOption(label="KitPVP", value="kitpvp", emoji="‚öîÔ∏è"),
            discord.SelectOption(label="SkyWars", value="skywars", emoji="‚òÅÔ∏è"),
            discord.SelectOption(label="BridgeFight", value="bridgefight", emoji="üåâ"),
            discord.SelectOption(label="Sumo", value="sumo", emoji="üëê"),
            discord.SelectOption(label="Fireball Fight", value="fireball_fight", emoji="üî•"),
            discord.SelectOption(label="Bridge", value="bridge", emoji="üåÅ")
        ]
    )
    async def gamemode_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        await interaction.response.defer()

        try:
            async with aiohttp.ClientSession() as session:
                ascend_data = await fetch_json(session, f"{WEBSITE_URL}/api/player/{self.player_id}/ascend-data?gamemode={select.values[0]}", "–ø–æ–ª—É—á–µ–Ω–∏—è ASCEND –¥–∞–Ω–Ω—ã—Ö")

                if not ascend_data or not ascend_data.get('success'):
                    await interaction.followup.send("‚ùå ASCEND –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", ephemeral=True)
                    return

                ascend = ascend_data['ascend']

            embed = discord.Embed(
                title="üéÆ ASCEND Performance Card",
                description=f"**{self.nickname}** | {select.values[0].title()}",
                color=get_tier_color(ascend['overall_tier']),
                timestamp=datetime.utcnow()
            )

            skill_emojis = get_skill_emojis(select.values[0])
            skills = [
                (ascend.get('skill1_name', 'PVP'), ascend.get('skill1_tier', 'D'), ascend.get('skill1_score', 25)),
                (ascend.get('skill2_name', 'Clutching'), ascend.get('skill2_tier', 'D'), ascend.get('skill2_score', 25)),
                (ascend.get('skill3_name', 'Block Placement'), ascend.get('skill3_tier', 'D'), ascend.get('skill3_score', 25)),
                (ascend.get('skill4_name', 'Gamesense'), ascend.get('skill4_tier', 'D'), ascend.get('skill4_score', 25))
            ]

            for i, (name, tier, score) in enumerate(skills):
                emoji = skill_emojis[i] if i < len(skill_emojis) else "‚≠ê"
                embed.add_field(name=f"{emoji} {name}", value=f"**{tier}** ({score}/100)", inline=True)

            embed.add_field(name="üëë Overall", value=f"**{ascend['overall_tier']}** TIER", inline=True)

            avg_score = sum(skill[2] for skill in skills) / 4
            embed.add_field(name="üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", value=f"**{avg_score:.1f}/100**", inline=True)

            embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{self.nickname}/100")
            embed.set_footer(text=f"–û—Ü–µ–Ω—â–∏–∫: {ascend.get('evaluator_name', 'Elite Squad')} | Elite Squad ASCEND")

            self.current_gamemode = select.values[0]
            await interaction.edit_original_response(embed=embed, view=self)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞: {e}")
            await interaction.followup.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞", ephemeral=True)

    @discord.ui.button(label="–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫", style=discord.ButtonStyle.secondary, emoji="üìà")
    async def history_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()

        try:
            async with aiohttp.ClientSession() as session:
                history_data = await fetch_json(session, f"{WEBSITE_URL}/api/player/{self.player_id}/ascend-history?gamemode={self.current_gamemode}&limit=10", "–ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")

                if not history_data or not history_data.get('success'):
                    await interaction.followup.send("‚ùå –ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", ephemeral=True)
                    return

                history = history_data['history']

            embed = discord.Embed(
                title=f"üìà –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ - {self.nickname}",
                description=f"–†–µ–∂–∏–º: {self.current_gamemode.title()}",
                color=0x3498db,
                timestamp=datetime.utcnow()
            )

            if not history:
                embed.add_field(name="üìù –ò—Å—Ç–æ—Ä–∏—è", value="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ü–µ–Ω–∫–∞—Ö", inline=False)
            else:
                history_text = ""
                for entry in history[:5]:
                    date = datetime.fromisoformat(entry['created_at'].replace('Z', '+00:00')).strftime('%d.%m.%Y')
                    change_emoji = "üìà" if entry['change_type'] == 'upgrade' else "üìâ" if entry['change_type'] == 'downgrade' else "üîÑ"
                    tier_change = f"{entry['old_overall_tier']} ‚Üí {entry['new_overall_tier']}" if entry['old_overall_tier'] else f"New: {entry['new_overall_tier']}"
                    history_text += f"{change_emoji} {date}: {tier_change}\n"

                embed.add_field(name="üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", value=history_text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", inline=False)

            await interaction.followup.send(embed=embed, ephemeral=True)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await interaction.followup.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏", ephemeral=True)

@bot.tree.command(name="leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤")
async def leaderboard_command(interaction: discord.Interaction, sort_by: str = "experience", limit: int = 10):
    try:
        await interaction.response.defer()

        limit = min(max(limit, 5), 20)

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/leaderboard?sort={sort_by}&limit={limit}", "–ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")

            if not data or not data.get('players'):
                await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤", ephemeral=True)
                return

            players = data['players']

        embed = discord.Embed(
            title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ Elite Squad",
            description=f"–¢–æ–ø {len(players)} –∏–≥—Ä–æ–∫–æ–≤ –ø–æ {sort_by}",
            color=0xffd700,
            timestamp=datetime.utcnow()
        )

        leaderboard_text = ""
        for i, player in enumerate(players):
            rank_emoji = ["ü•á", "ü•à", "ü•â"][i] if i < 3 else f"{i+1}."
            value = player.get(sort_by, 0)
            leaderboard_text += f"{rank_emoji} **{player['nickname']}** - {value:,}\n"

        embed.add_field(name=f"üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ {sort_by}", value=leaderboard_text, inline=False)
        embed.set_footer(text="Elite Squad Bedwars")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ leaderboard: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤", ephemeral=True)

@bot.tree.command(name="player", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞")
async def player_command(interaction: discord.Interaction, nickname: str):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/search?q={nickname}", "–ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞")

            if not data or not data.get('players'):
                await interaction.followup.send(f"‚ùå –ò–≥—Ä–æ–∫ `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return

            player = data['players'][0]

        embed = discord.Embed(
            title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {player['nickname']}",
            color=0x3498db,
            timestamp=datetime.utcnow()
        )

        embed.add_field(name="üìä –£—Ä–æ–≤–µ–Ω—å", value=f"**{player['level']}**", inline=True)
        embed.add_field(name="‚ú® –û–ø—ã—Ç", value=f"**{player['experience']:,}**", inline=True)
        embed.add_field(name="üíú –ö–∞—Ä–º–∞", value=f"**{player.get('reputation', 0)}**", inline=True)
        embed.add_field(name="‚öîÔ∏è –£–±–∏–π—Å—Ç–≤–∞", value=f"**{player['kills']:,}**", inline=True)
        embed.add_field(name="üíÄ –°–º–µ—Ä—Ç–∏", value=f"**{player['deaths']:,}**", inline=True)
        embed.add_field(name="üìà K/D", value=f"**{player['kd_ratio']}**", inline=True)
        embed.add_field(name="üõèÔ∏è –ö—Ä–æ–≤–∞—Ç–∏", value=f"**{player.get('beds_broken', 0):,}**", inline=True)
        embed.add_field(name="üèÜ –ü–æ–±–µ–¥—ã", value=f"**{player['wins']:,}**", inline=True)
        embed.add_field(name="üéÆ –ò–≥—Ä—ã", value=f"**{player['games_played']:,}**", inline=True)

        embed.set_thumbnail(url=f"https://mc-heads.net/avatar/{player['nickname']}/100")
        embed.add_field(name="üîó –ü—Ä–æ—Ñ–∏–ª—å", value=f"[–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ]({WEBSITE_URL}/player/{player['id']})", inline=False)

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ player: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞", ephemeral=True)

@bot.tree.command(name="stats", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞")
async def stats_command(interaction: discord.Interaction):
    try:
        await interaction.response.defer()

        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, f"{WEBSITE_URL}/api/stats", "–ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            if not data:
                await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞", ephemeral=True)
                return

        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Elite Squad",
            color=0xe74c3c,
            timestamp=datetime.utcnow()
        )

        embed.add_field(name="üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤", value=f"**{data.get('total_players', 0):,}**", inline=True)
        embed.add_field(name="‚öîÔ∏è –í—Å–µ–≥–æ —É–±–∏–π—Å—Ç–≤", value=f"**{data.get('total_kills', 0):,}**", inline=True)
        embed.add_field(name="üõèÔ∏è –ö—Ä–æ–≤–∞—Ç–µ–π —Å–ª–æ–º–∞–Ω–æ", value=f"**{data.get('total_beds_broken', 0):,}**", inline=True)
        embed.add_field(name="üèÜ –í—Å–µ–≥–æ –ø–æ–±–µ–¥", value=f"**{data.get('total_wins', 0):,}**", inline=True)
        embed.add_field(name="üéÆ –í—Å–µ–≥–æ –∏–≥—Ä", value=f"**{data.get('total_games', 0):,}**", inline=True)
        embed.add_field(name="üí∞ –í—Å–µ–≥–æ –∫–æ–π–Ω–æ–≤", value=f"**{data.get('total_coins', 0):,}**", inline=True)

        if data.get('top_player'):
            embed.add_field(name="üëë –¢–æ–ø –∏–≥—Ä–æ–∫", value=f"**{data['top_player']['nickname']}**", inline=True)

        embed.set_footer(text="Elite Squad Bedwars")

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ stats: {e}")
        await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", ephemeral=True)

@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="ü§ñ –ö–æ–º–∞–Ω–¥—ã Elite Squad Bot v2.0",
        description="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
        color=0x9b59b6,
        timestamp=datetime.utcnow()
    )

    embed.add_field(
        name="üéÆ –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        value="""
        `/ascend <nickname> [gamemode] [visual]` - ASCEND –∫–∞—Ä—Ç–æ—á–∫–∞
        `/player <nickname>` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        `/leaderboard [sort_by] [limit]` - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
        `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        """,
        inline=False
    )

    embed.add_field(
        name="üíú –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã",
        value="""
        `/karma [nickname]` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä–º–µ
        """,
        inline=False
    )

    embed.add_field(
        name="üõí –ú–∞–≥–∞–∑–∏–Ω –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        value="""
        `/shop [category]` - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞
        `/inventory <nickname>` - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
        """,
        inline=False
    )

    embed.add_field(
        name="üìú –ö–≤–µ—Å—Ç—ã",
        value="""
        `/quests <nickname>` - –ö–≤–µ—Å—Ç—ã –∏–≥—Ä–æ–∫–∞
        `/submit_quest <name> [screenshot]` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        """,
        inline=False
    )

    embed.add_field(name="üéÆ –†–µ–∂–∏–º—ã –∏–≥—Ä—ã –¥–ª—è ASCEND",
                   value="bedwars, kitpvp, skywars, bridgefight, sumo, fireball_fight, bridge", inline=False)
    embed.add_field(name="üîó –°–∞–π—Ç", value=f"[–û—Ç–∫—Ä—ã—Ç—å Elite Squad]({WEBSITE_URL})", inline=False)

    embed.set_footer(text="Elite Squad ASCEND Bot v2.0 | –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!")

    await interaction.response.send_message(embed=embed)

def get_tier_color(tier):
    colors = {
        'S+': 0xff1744, 'S': 0xff5722,
        'A+': 0xff9800, 'A': 0xffc107,
        'B+': 0x4caf50, 'B': 0x2196f3,
        'C+': 0x9c27b0, 'C': 0x607d8b,
        'D': 0x795548
    }
    return colors.get(tier, 0x607d8b)

def get_skill_emojis(gamemode):
    emoji_maps = {
        'bedwars': ['‚öîÔ∏è', 'üî•', 'üß±', 'üß†'],
        'kitpvp': ['üéØ', '‚ù§Ô∏è', 'üèÉ', 'üìè'],
        'skywars': ['üîç', 'üß™', '‚ö´', 'üëä'],
        'bridgefight': ['‚úèÔ∏è', 'üåâ', 'üß†', '‚öîÔ∏è'],
        'sumo': ['üß†', '‚úã', '‚öôÔ∏è', 'üèÉ'],
        'fireball_fight': ['üõ°Ô∏è', 'üî•', 'üß†', '‚öîÔ∏è'],
        'bridge': ['‚è©', 'üõ°Ô∏è', 'üß†', '‚öîÔ∏è']
    }
    return emoji_maps.get(gamemode, ['‚≠ê', '‚≠ê', '‚≠ê', '‚≠ê'])

def run_bot():
    try:
        bot.run(BOT_TOKEN)
    except discord.errors.LoginFailure:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ.")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    run_bot()